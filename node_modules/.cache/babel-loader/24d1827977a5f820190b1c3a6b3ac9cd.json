{"ast":null,"code":"var _jsxFileName = \"/home/parallels/PycharmProjects/frontend/src/pages/games/games.jsx\";\nimport React, { Component } from 'react';\nimport { BACKEND, TEAM_IMAGE } from '../../config';\nimport cookie from 'react-cookies';\nimport Header from '../../components/header';\nimport './games.css';\n/**\n * The games page which shows the detail of the game, which contains the winner,\n * each players' stat in that game, and possibly the mvp of the game ( generated by users' votes )\n */\n\nclass Games extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getStats = function () {\n      let url = BACKEND + '/games/gameStats/' + this.state.id;\n      fetch(url).then(res => {\n        return res.json();\n      }).then(data => {\n        this.setState({\n          stats: data\n        });\n      });\n    };\n\n    this.getGameInfo = function () {\n      let url = BACKEND + '/games/gameInfo/' + this.state.id;\n      fetch(url).then(res => {\n        return res.json();\n      }).then(data => {\n        this.setState({\n          gameInfo: data\n        });\n      });\n    };\n\n    this.getTeamMap = function () {\n      let url = BACKEND + '/teamMap';\n      fetch(url).then(res => {\n        return res.json();\n      }).then(data => {\n        this.setState({\n          map: data\n        });\n      });\n    };\n\n    this.vote = function (player_id, game_id) {\n      let user_id = cookie.load('user_id');\n\n      if (!user_id) {\n        this.props.history.push('/login');\n        return;\n      }\n\n      let url = BACKEND + 'vote';\n      let data = {\n        user_id: user_id,\n        player_id: player_id,\n        game_id: game_id\n      };\n      let req = {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      fetch(url, req).then(res => {\n        return res.json();\n      }).then(data => {\n        if (data.err) {\n          alert(data.err);\n          return;\n        }\n\n        if (data.success) {\n          alert('successfully vote');\n          return;\n        }\n      });\n    };\n\n    this.findMVP = function () {\n      let url = BACKEND + 'mvp/' + this.state.id;\n      fetch(url).then(res => {\n        return res.json();\n      }).then(data => {\n        this.setState({\n          mvp: data.name\n        });\n      });\n    };\n\n    this.state = {\n      stats: [],\n      id: this.props.match.params.gameId,\n      map: {},\n      gameInfo: {},\n      mvp: ''\n    };\n    this.getStats = this.getStats.bind(this);\n    this.getTeamMap = this.getTeamMap.bind(this);\n    this.getGameInfo = this.getGameInfo.bind(this);\n    this.vote = this.vote.bind(this);\n    this.findMVP = this.findMVP.bind(this);\n  }\n\n  componentDidMount() {\n    this.getStats();\n    this.getGameInfo();\n    this.getTeamMap();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"gamePageOuter\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"gamesOuterBox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"gamesInnerBox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: TEAM_IMAGE + this.state.map[this.state.gameInfo.team1_id] + '_logo.svg',\n      className: \"infoImg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      src: TEAM_IMAGE + this.state.map[this.state.gameInfo.team2_id] + '_logo.svg',\n      className: \"infoImg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"mvpBox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \"MVP: \", this.state.mvp), React.createElement(\"table\", {\n      className: \"gamesTable\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"Name\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"PTS\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"REB\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"AST\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"STL\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"BLK\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, \"TOV\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, \"3PA\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \"3PM\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, \"FGA\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, \"FGM\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, \"MIN\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, this.state.stats.map((element, idx) => {\n      let row = 'odd';\n\n      if (idx % 2 === 0) {\n        row = 'even';\n      }\n\n      return React.createElement(\"tr\", {\n        className: row,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, element.name), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, element.scores), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, element.rebounds), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, element.assists), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, element.steals), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, element.blocks), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, element.turnovers), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, element.three_hit), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, element.three_made), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, element.hit), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, element.made), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, element.time), React.createElement(\"button\", {\n        className: \"voteBtn\",\n        onClick: () => {\n          this.vote(element.player_id, this.state.id);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, \" vote \"));\n    }))))));\n  }\n\n}\n\nexport default Games;","map":{"version":3,"sources":["/home/parallels/PycharmProjects/frontend/src/pages/games/games.jsx"],"names":["React","Component","BACKEND","TEAM_IMAGE","cookie","Header","Games","constructor","props","getStats","url","state","id","fetch","then","res","json","data","setState","stats","getGameInfo","gameInfo","getTeamMap","map","vote","player_id","game_id","user_id","load","history","push","req","method","body","JSON","stringify","headers","err","alert","success","findMVP","mvp","name","match","params","gameId","bind","componentDidMount","render","team1_id","team2_id","element","idx","row","scores","rebounds","assists","steals","blocks","turnovers","three_hit","three_made","hit","made","time"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\n\nimport { BACKEND, TEAM_IMAGE } from '../../config'\nimport cookie from 'react-cookies'\nimport Header from '../../components/header'\n\nimport './games.css'\n\n\n\n\n/**\n * The games page which shows the detail of the game, which contains the winner,\n * each players' stat in that game, and possibly the mvp of the game ( generated by users' votes )\n */\nclass Games extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            stats : [],\n            id : this.props.match.params.gameId,\n            map : {},\n            gameInfo : {},\n            mvp : ''\n        };\n        this.getStats = this.getStats.bind( this );\n        this.getTeamMap = this.getTeamMap.bind(this);\n        this.getGameInfo = this.getGameInfo.bind(this);\n        this.vote = this.vote.bind(this);\n        this.findMVP = this.findMVP.bind( this );\n    }\n\n    componentDidMount() {\n        this.getStats();\n        this.getGameInfo();\n        this.getTeamMap();\n    }\n\n    getStats = function() {\n        let url = BACKEND + '/games/gameStats/' + this.state.id;\n        fetch( url ).then( res => {\n            return res.json();\n        }).then( data => {\n            this.setState( { stats : data } );\n        });\n    };\n\n    getGameInfo = function() {\n        let url = BACKEND + '/games/gameInfo/' + this.state.id;\n        fetch( url ).then( res => {\n            return res.json();\n        }).then( data => {\n            this.setState( { gameInfo : data } );\n        });\n    };\n\n    /**\n     * get a map which maps the id of a team to the name of the team\n     */\n    getTeamMap = function() {\n        let url = BACKEND + '/teamMap';\n        fetch( url ).then( res => {\n            return res.json();\n        }).then( data => {\n            this.setState( { map : data } )\n        });\n    };\n\n\n    /**\n     * vote for game's MVP\n     * @param player_id: id of the player\n     * @param game_id: id of the game\n     */\n    vote = function( player_id, game_id ) {\n        let user_id = cookie.load('user_id');\n\n        if ( !user_id ) {\n            this.props.history.push( '/login' );\n            return;\n        }\n\n        let url = BACKEND + 'vote';\n        let data  = {\n            user_id : user_id,\n            player_id : player_id,\n            game_id : game_id\n        };\n\n        let req = {\n            method : 'POST',\n            body : JSON.stringify( data ),\n            headers : { 'Content-Type' : 'application/json' }\n        };\n\n        fetch( url, req ).then( res => {\n            return res.json();\n        }).then( data => {\n            if ( data.err ) {\n                alert( data.err );\n                return;\n            }\n            if ( data.success ) {\n                alert( 'successfully vote' );\n                return;\n            }\n        });\n    };\n\n    findMVP = function() {\n        let url = BACKEND + 'mvp/' + this.state.id;\n        fetch( url ).then( res => {\n            return res.json();\n        }).then( data =>{\n            this.setState( { mvp : data.name } )\n        });\n    };\n\n    render() {\n        return (\n            <div>\n                <Header/>\n                <div className='gamePageOuter'>\n\n\n                    <div className='gamesOuterBox'>\n                        <div className='gamesInnerBox'>\n                            <img src={ TEAM_IMAGE + this.state.map[this.state.gameInfo.team1_id] + '_logo.svg' } className='infoImg'/>\n                            <img src={ TEAM_IMAGE + this.state.map[this.state.gameInfo.team2_id] + '_logo.svg' } className='infoImg'/>\n                        </div>\n                        <div  className='mvpBox'>\n                            MVP: { this.state.mvp }\n                        </div>\n                        <table className='gamesTable'>\n                                <thead>\n                                    <tr>\n                                        <th>Name</th>\n                                        <th>PTS</th>\n                                        <th>REB</th>\n                                        <th>AST</th>\n                                        <th>STL</th>\n                                        <th>BLK</th>\n                                        <th>TOV</th>\n                                        <th>3PA</th>\n                                        <th>3PM</th>\n                                        <th>FGA</th>\n                                        <th>FGM</th>\n                                        <th>MIN</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    { this.state.stats.map( ( element, idx) => {\n                                        let row = 'odd';\n                                        if ( idx % 2 === 0) {\n                                            row = 'even';\n                                        }\n                                        return (\n                                            <tr className={ row }>\n                                                <th>{ element.name }</th>\n                                                <th>{ element.scores }</th>\n                                                <th>{ element.rebounds }</th>\n                                                <th>{ element.assists }</th>\n                                                <th>{ element.steals }</th>\n                                                <th>{ element.blocks }</th>\n                                                <th>{ element.turnovers }</th>\n                                                <th>{ element.three_hit }</th>\n                                                <th>{ element.three_made }</th>\n                                                <th>{ element.hit }</th>\n                                                <th>{ element.made }</th>\n                                                <th>{ element.time }</th>\n                                                <button className='voteBtn' onClick={ () => {\n                                                    this.vote( element.player_id, this.state.id );\n                                                } }> vote </button>\n                                            </tr>\n                                        )\n                                    } ) }\n                                </tbody>\n                            </table>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Games;"]},"metadata":{},"sourceType":"module"}