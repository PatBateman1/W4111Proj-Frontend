{
  "_from": "react-cookies",
  "_id": "react-cookies@0.1.1",
  "_inBundle": false,
  "_integrity": "sha512-PP75kJ4vtoHuuTdq0TAD3RmlAv7vuDQh9fkC4oDlhntgs9vX1DmREomO0Y1mcQKR9nMZ6/zxoflaMJ3MAmF5KQ==",
  "_location": "/react-cookies",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "react-cookies",
    "fetchSpec": "latest",
    "name": "react-cookies",
    "raw": "react-cookies",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-cookies/-/react-cookies-0.1.1.tgz",
  "_shasum": "2a35807e04f5a13f58ccd1a9fb66574506873c88",
  "_shrinkwrap": null,
  "_spec": "react-cookies",
  "_where": "/home/parallels/PycharmProjects/frontend",
  "author": {
    "email": "bukinoshita@gmail.com",
    "name": "Bu Kinoshita"
  },
  "bugs": {
    "url": "https://github.com/bukinoshita/react-cookies/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "cookie": "^0.3.1",
    "object-assign": "^4.1.1"
  },
  "deprecated": false,
  "description": "Load and save cookies with React",
  "devDependencies": {
    "babel-cli": "^6.24.1",
    "babel-jest": "^19.0.0",
    "babel-plugin-add-module-exports": "^0.2.1",
    "babel-preset-latest": "^6.24.1",
    "babel-preset-stage-2": "^6.24.1",
    "babel-register": "^6.24.1",
    "eslint-config-prettier": "^2.2.0",
    "husky": "^0.14.1",
    "jest": "^19.0.2",
    "lint-staged": "^4.0.0",
    "prettier": "^1.4.4",
    "xo": "^0.18.2"
  },
  "homepage": "https://github.com/bukinoshita/react-cookies#readme",
  "keywords": [
    "cookie",
    "cookies",
    "jsx",
    "react",
    "react-cookie",
    "react-cookies",
    "reactjs"
  ],
  "license": "MIT",
  "lint-staged": {
    "src/*.js": [
      "git add",
      "npm run test",
      "prettier --semi false --single-quote --write"
    ]
  },
  "main": "build/cookie.js",
  "name": "react-cookies",
  "optionalDependencies": {},
  "readme": "# react-cookies [![Build Status](https://travis-ci.org/bukinoshita/react-cookies.svg?branch=master)](https://travis-ci.org/bukinoshita/react-cookies)\n\n> Load and save cookies with React\n\n## Install\n```bash\n$ npm install react-cookies --save\n```\n\n\n## Usage\n\n```js\nimport { Component } from 'react'\nimport cookie from 'react-cookies'\n\nimport LoginPanel from './LoginPanel'\nimport Dashboard from './Dashboard'\n\nclass MyApp extends Component {\n  constructor () {\n    super()\n\n    this.onLogin = this.onLogin.bind(this)\n    this.onLogout = this.onLogout.bind(this)\n  }\n\n  componentWillMount() {\n    this.state =  { userId: cookie.load('userId') }\n  }\n\n  onLogin(userId) {\n    this.setState({ userId })\n    cookie.save('userId', userId, { path: '/' })\n  }\n\n  onLogout() {\n    cookie.remove('userId', { path: '/' })\n  }\n\n  render() {\n    const { userId } = this.state\n\n    if (!userId) {\n      return <LoginPanel onSuccess={this.onLogin} />\n    }\n\n    return <Dashboard userId={userId} />\n  }\n}\n```\n\n_React cookies is the v1.0.4 of react-cookie with a couple changes._\n\n## Isomorphic cookies!\n\nTo be able to access user cookies while doing server-rendering, you can use [`plugToRequest`](#user-content-plugtorequestreq-res-unplug) or [`setRawCookie`](#user-content-setrawcookiecookies).\n\n\n## API\n\n### .load(name, [doNotParse])\n\nLoad the cookie value.<br />\nReturns `undefined` if the cookie does not exist.<br />\nDeserialize any cookie starting with `{` or `[` unless `dotNotParse` is `true`.\n\n#### name\n\nType: `string`<br/>\nRequired\n\n#### doNotParse\n\nType: `boolean`<br/>\nDefault: false\n\n#### Example\n\n```js\nimport cookie from 'react-cookies'\n\ncomponentWillMount() {\n  this.state =  { token: cookie.load('token') }\n  // => 123456789\n}\n```\n\n### .loadAll()\n\nLoad all available cookies.<br />\nReturns an `object` containing all cookies.\n\n#### Example\n\n```js\nimport cookie from 'react-cookies'\n\ncomponentWillMount() {\n  this.state =  { cookies: cookie.loadAll() }\n  // => { cookies: { token: 123456789, _ga: GA198712 } }\n}\n```\n\n\n### .select([regex])\n\nFind all the cookies with a name that match the regex.<br />\nReturns an `object` with the cookie name as the key.\n\n#### Example\n\n```js\nimport cookie from 'react-cookies'\n\ncomponentWillMount() {\n  this.state =  { tests: cookie.select(/\\btest(er|ing|ed|s)?\\b/g) }\n  // => { tests: { test: 'test', 'testing': 'testing' } }\n}\n```\n\n### .save(name, value, [options])\n\nSet a cookie.\n\n#### name\n\nType: `string`<br/>\nRequired\n\n#### value\n\nType: `string`||`number`||`object`<br/>\nRequired\n\n#### options\n\nSupport all the cookie options from the [RFC 6265](https://tools.ietf.org/html/rfc6265#section-4.1.2.1).\n\nType: `object`\n\n##### path\n\nCookie path.<br/>\nUse `/` as the path if you want your cookie to be accessible on all pages.\n\nType: `string`\n\n##### expires\n\nAbsolute expiration date for the cookie.\n\nType: `object (date)`\n\n##### maxAge\n\nRelative max age of the cookie from when the client receives it in `seconds`.\n\nType: `number`\n\n##### domain\n\nDomain for the cookie.<br/>\nUse `https://*.yourdomain.com` if you want to access the cookie in all your subdomains.\n\nType: `string`\n\n##### secure\n\nIf set `true` it will only be accessible through https.\n\nType: `boolean`\n\n##### httpOnly\n\nIf set `true` it will only be accessible on the server.\n\nType: `boolean`\n\n#### Example\n\n```js\nimport cookie from 'react-cookies'\n\nhandleButtonClick() {\n  const expires = new Date()\n   expires.setDate(Date.now() + 1000 * 60 * 60 * 24 * 14)\n\n  cookie.save(\n    'userId',\n    '1234',\n    {\n      path: '/',\n      expires,\n      maxAge: 1000,\n      domain: 'https://play.bukinoshita.io',\n      secure: true\n      httpOnly: true\n    }\n  )\n}\n```\n\n\n### .remove(name, [options])\n\nRemove a cookie.\n\n#### name\n\nType: `string`<br/>\nRequired\n\n#### options\n\nSupport all the cookie options from the [RFC 6265](https://tools.ietf.org/html/rfc6265#section-4.1.2.1).\n\nType: `object`\n\n##### path\n\nCookie path.<br/>\nUse `/` as the path if you want your cookie to be accessible on all pages.\n\nType: `string`\n\n##### expires\n\nAbsolute expiration date for the cookie.\n\nType: `object (date)`\n\n##### maxAge\n\nRelative max age of the cookie from when the client receives it in `seconds`.\n\nType: `number`\n\n##### domain\n\nDomain for the cookie.<br/>\nUse `https://*.yourdomain.com` if you want to access the cookie in all your subdomains.\n\nType: `string`\n\n##### secure\n\nIf set `true` it will only be accessible through https.\n\nType: `boolean`\n\n##### httpOnly\n\nIf set `true` it will only be accessible on the server.\n\nType: `boolean`\n\n#### Example\n\n```js\nimport cookie from 'react-cookies'\n\nhandleButtonClick() {\n  cookie.remove('userId', { path: '/' })\n}\n```\n\n\n### .plugToRequest(req, res): unplug()\nLoad the user cookies so you can do server-rendering and match the same result.<br />\nAlso send back to the user the new cookies.<br />\nWork with [connect](https://github.com/senchalabs/connect) or [express.js](https://github.com/expressjs/express) by using the cookieParser middleware first.<br />\nUse `const unplug = plugToRequest(req, res)` just before your `renderToString`.<br />\n<br />\nReturns `unplug()` function so it stops setting cookies on the response.\n\n\n### .setRawCookie(cookies)\nLoad the user cookies so you can do server-rendering and match the same result.<br />\nUse `setRawCookie(headers.cookie)` just before your `renderToString`.<br />\nMake sure it is the raw string from the request headers.<br />\n\n\n## License\n[MIT](https://github.com/bukinoshita/react-cookies/blob/master/LICENSE) &copy; Bu Kinoshita\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/bukinoshita/react-cookies.git"
  },
  "scripts": {
    "build": "babel src -d build --ignore __tests__",
    "lint": "xo --quiet",
    "precommit": "lint-staged",
    "test": "npm run lint && node_modules/.bin/jest",
    "watch": "jest --watch"
  },
  "version": "0.1.1",
  "xo": {
    "esnext": true,
    "globals": [
      "document"
    ],
    "ignores": [
      "__tests__/*.js",
      "build/*.js"
    ],
    "rules": {
      "func-names": 0,
      "object-curly-spacing": 0
    },
    "semicolon": false,
    "space": true
  }
}
